---
  title: "Midgard releases and marketing"
  categories: 
    - "midgard"
    - ""
  layout: "post"

---
<p>
The <a href="http://coccinella.im/">Coccinella IM</a> project published an interesting entry on potential marketing impact of <a href="http://coccinella.im/synchronized-releases">synchronized software releases</a>:
</p><blockquote>
How can we copy the marketing successes of Apple and Microsoft to open-source? Some may suggest we need someone like Steve Jobs, whilst others would like to spend more money on launch events. They are both wrong! Trying to copy Steve Jobs or Microsoft's deep pockets is mission impossible. If Apple or Microsoft notices we are trying to catch up, they will simply improve their key strategic advantages and catching up will become even more challenging for us. What do we have to do then?
<br /><br />Community is in what we excel; our key strategic advantage. To repeat the marketing success of Apple and Microsoft we need to leverage the community. Massive synchronized releasing is the perfect tool to achieve this leverage. By synchronizing, release related marketing efforts of multiple communities are focused at the same moment and can leverage each other. The rhythm of so much projects doing their marketing efforts at the same moment will shake the Internet.
</blockquote><p>
Synchronized, or timed and regular software releases are already being utilized for example <a href="https://wiki.ubuntu.com/TimeBasedReleases">by the Ubuntu distribution</a>. This helps companies and individual end users to carefully plan their upgrade strategy. But in addition, it makes it easy for technology writers to <a href="http://arstechnica.com/news.ars/post/20080629-horny-for-ubuntu-8-10-first-look-at-intrepid-ibex.html">write about the new releases</a>. When plans and schedules are clear, articles will more likely appear.
</p><p>
With <a href="http://www.midgard-project.org/">Midgard</a>, the project is riddled with very varying release cycles. At the moment we're simultaneously <a href="http://bergie.iki.fi/blog/big_midgard_release_day.html">working on major releases</a> in <a href="http://bergie.iki.fi/blog/some_midgard_roadmapping.html">two different generations</a> of the platform, and on top of that actively maintaining and developing the <a href="http://www.midgard-project.org/midgard/1.8/">stable 1.8/2.8 branch</a>.
</p><p>
This has led to the situation where testing cycles can be excessively long. For example, MidCOM 2.8 was in beta for ten months, and has seen <a href="http://pear.midcom-project.org/index.php?package=midcom&amp;downloads">13 minor updates</a> since <a href="http://www.midgard-project.org/updates/view/midcom_2-8-0_released.html">the stable release</a>. Similarly, Midgard 1.8 is in <a href="http://www.midgard-project.org/updates/view/1212065673.html">its eight update</a>. And <a href="http://www.midgard-project.org/documentation/">documentation</a> has a hard time staying up-to-date with all this.
</p><p>
This would already make keeping up with Midgard difficult, but the situation is exacerbated by the fact that Midgard can be so many different things:
</p><p>
<img src="/files/layers-of-midgard.png" height="331" width="336" border="0" hspace="4" vspace="4" alt="Layers of Midgard" title="Layers of Midgard" /></p><p>
For some developers Midgard means the <a href="http://www.midgard-project.org/documentation/midgard-core/">libmidgard</a> object persistence and replication library, and its <a href="http://www.midgard-project.org/documentation/php_midgard_core/">various</a> <a href="http://www.midgard-project.org/documentation/python_midgard/">language</a> <a href="http://bergie.iki.fi/blog/midgard_2-more_than_just_php-more_than_just_cms.html">bindings</a>. For some it is <a href="http://www.midgard-project.org/documentation/midcom">MidCOM</a>, an <a href="http://bergie.iki.fi/blog/midcom_3_at_a_glance.html">MVC framework for PHP</a> that can be used to build any kind of web services. For some it is <a href="http://pear.midcom-project.org/index.php?category=1&amp;page=1">a component</a> specific for a task like <a href="http://www.midgard-project.org/documentation/reference-components-net.nemein.registrations/">event registrations management</a> or <a href="http://bergie.iki.fi/blog/direct-marketing-component-for-openpsa.html">direct marketing</a>. And finally, for some it is a full end-user application suite like <a href="http://www.midgard-project.org/midgard/1.8/">Midgard CMS</a> or <a href="http://www.openpsa.org/">OpenPsa</a>.
</p><p>
Midgard is a good tool. We have lots of great code and functionality, and a <a href="http://boids.name/empty/articles/2007/08/02/midgard-at-protva">nice</a> <a href="http://bergie.iki.fi/blog/midgard_developers_in_linkoping.html">community</a> to top that off. But for a regular end user of free software it is very difficult to understand the whole Midgard ecosystem, and where is sits with competition on the various layers. On CMS (or applications) layer we're competing with the likes of <a href="http://drupal.org/">Drupal</a> and <a href="http://plone.org/">Plone</a>, on MVC framework layer with <a href="http://www.rubyonrails.org/">Ruby on Rails</a> and <a href="http://www.djangoproject.com/">Django</a>, and so on.
</p><p>
So, how to move forward? Here are some ideas:
</p><p>
<strong>Differentiate the various layers</strong>, and their individual components more clearly marketing-wise. Instead of calling all of this Midgard we should introduce names for different collections. This is what we used to do with <a href="http://nemein.com/en/news/8038db7b7ad7882ef4bb66acb7707ebb.html">Aegir CMS</a> in early 2000s with great results, and what <a href="http://www.mozilla.com/en-US/firefox">has worked very well</a> for the <a href="http://www.mozilla.com/en-US/about/whatismozilla.html">Mozilla</a> project.
</p><p>
In this scenario Midgard would be the central community name, and probably the name of the persistence layer. The other tools would use their own marketing names. Also components would get rid of their too techy <a href="http://www.midgard-project.org/documentation/concepts-midcom-specs-architecture-namespacing/">namespace-based names</a> and use something more human readable in their marketing.
</p><p>
This also means redesigning the Midgard site to provide more visibility to the different parts. Something closer to the <a href="http://maemo.org/downloads/OS2008/">maemo application catalogue</a> would be far better than our <a href="http://pear.midcom-project.org/index.php?category=1&amp;amp;page=1">current component list</a>.
</p><p>
<strong>Synchronize releases</strong>. This could mean digging up the <a href="http://www.midgard-project.org/development/mrfc/view/0008.html">time-based Midgard release process</a> proposal from mothballs, or just ensuring that libmidgard, MidCOM, documentation and the important components all are developed <a href="http://useopensource.blogspot.com/2008/04/synching-open-source-release-schedule.html">in sync</a> with each other. On wider scale this could also mean trying to keep the pace with releases of dependencies like <a href="http://snaps.php.net/">PHP</a> and <a href="http://www.gnome-db.org/">libgda</a>, or with important platforms like <a href="http://release.debian.org/">debian</a> and <a href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9000903&amp;source=rss_topic122">RHEL</a>.
</p><p>
This probably requires finding new resources and tools for <strong>testing and documentation</strong>. For example the <a href="http://midgardwiki.contentcontrol-berlin.de/index.php/Main_Page">unofficial Midgard wiki</a> is often in better state than the official one, so why not merge them? Similarly, keeping <a href="http://teroheikkinen.iki.fi/blog/view/midcom_3_virtual_machine.html">downloadable virtual machine images</a> available should make testing new Midgard releases a lot easier.
</p><p>
These of course are just ideas. In any case the transition to <a href="http://bergie.iki.fi/blog/midgard_2-finally_legacy-free.html">Midgard2</a> makes it possible for us to rethink a lot of these things.
</p>